{{!< default}}

<main class="sign-up-main">
    <h1 class="sign-up-main__title">
        {{#page}}{{title}}{{else}}Subscribe{{/page}}
    </h1>

    {{#if @member}}

    {{!-- Logged in, no paid plans available --}}
        <p class="tc">Redirecting...</p>
        <script>window.location = '{{@site.url}}/account/';</script>

    {{else}}
        <div class="sign-up-main__content">
            <p class="sign-up-main__description">Get the email newsletter and unlock access to member-only content.</p>
            <div class="web3-button-root"></div>
            <div class="sign-up-main__plan-options-root">
            </div>
            <p class="mb0">Already a member? <a href="/#/portal/signin">Please sign in â†’</a></p>
        </div>

    {{!-- If you offer paid plans, display details by making the next line just {{> plans}} --}}
    {{!-- {{> plans}} --}}

    {{/if}}
</main>
<script type="text/javascript" src="https://unpkg.com/web3@latest/dist/web3.min.js"></script>
<script type="text/javascript" src="https://unpkg.com/web3modal"></script>
<script type="text/javascript" src="https://unpkg.com/@walletconnect/web3-provider"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bignumber.js/8.0.2/bignumber.min.js"
        integrity="sha512-7UzDjRNKHpQnkh1Wf1l6i/OPINS9P2DDzTwQNX79JxfbInCXGpgI1RPb3ZD+uTP3O5X7Ke4e0+cxt2TxV7n0qQ=="
        crossorigin="anonymous"
></script>
<script src="https://cdn.jsdelivr.net/npm/jdenticon@3.1.0/dist/jdenticon.min.js" async
        integrity="sha384-VngWWnG9GS4jDgsGEUNaoRQtfBGiIKZTiXwm9KpgAeaRn6Y/1tAFiyXqSzqC8Ga/"
        crossorigin="anonymous">
</script>
<script>
    (function() {
        class Component {
            constructor(props) {
                this.props = props || {};
                this.refs = {};
                this.events = {};
                this.refElements = {};
                this.rootElement = null;
                this.listeners = [];
            }

            setProps(props = {}) {
                this.props = {
                    ...this.props,
                    ...props,
                };
                this.update();
            }

            async premount() {}

            async postrender() {}

            async postupdate() {}

            async mount(element) {
                this.rootElement = element;
                await this.premount();
                element.innerHTML = await this.render();
                await this.postrender();
                this.setRefs();
                this.listenEvents();
            }

            setRefs() {
                if (this.rootElement) {
                    for (let ref in this.refs) {
                        this.refElements[ref] = this.rootElement.querySelectorAll(`[data-ref-${ref}]`);
                    }
                }
            }

            listenEvents() {
                for (let key in this.events) {
                    const [event, reference] = key.split(' ');
                    this.rootElement.querySelectorAll(reference).forEach(el => {
                        el.removeEventListener(event, this.events[key]);
                        el.addEventListener(event, this.events[key]);
                    });
                }
            }

            async update() {
                for (let ref in this.refElements) {
                    const elements = this.refElements[ref];
                    for (let el of elements) {
                        el.innerHTML = await this.refs[ref](el);
                    }
                }
                this.setRefs();
                this.listenEvents();
                await this.postupdate();

                for (let listener of this.listeners) {
                    await listener.update();
                }
            }

            addListener(component) {
                this.listeners.push(component);
            }

            listen(component) {
                component.addListener(this);
                return () => {
                    this.listeners.filter(c => c !== this);
                };
            }
        }

        const subscriptionABI = [
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "subscriberAddress",
                        "type": "address"
                    }
                ],
                "name": "getIDsBySubscriber",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "",
                        "type": "bytes[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function",
                "constant": true
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "value",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "interval",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bytes",
                        "name": "uuid",
                        "type": "bytes"
                    }
                ],
                "name": "addSubscription",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes",
                                "name": "id",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "uuid",
                                "type": "bytes"
                            },
                            {
                                "internalType": "address",
                                "name": "ownerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "subscriberAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "tokenAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "lastSettlementTime",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "value",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "interval",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "ownerSubscriptionIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "subscriberSubscriptionIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "index",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bool",
                                "name": "exists",
                                "type": "bool"
                            }
                        ],
                        "internalType": "struct SubscriptionContract.Subscription",
                        "name": "",
                        "type": "tuple"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes",
                        "name": "subscriptionID",
                        "type": "bytes"
                    }
                ],
                "name": "removeSubscription",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
        ];

        class Signup extends Component {
            events = {
                'click .sign-up-main__plan-option__select-btn': async (evt) => {
                    this.setProps({ subscribing: true });
                    const { web3btn, contractAddress, uuid } = this.props;
                    const { web3, account } = web3btn.props;
                    const {
                        ownerAddress,
                        tokenAddress,
                        value,
                        interval,
                    } = evt.target.dataset;

                    if (web3) {
                        const contract = new web3.eth.Contract(subscriptionABI, contractAddress);
                        await contract.methods
                            .addSubscription(
                                ownerAddress,
                                tokenAddress,
                                value,
                                interval,
                                web3.utils.hexToBytes('0x' + uuid.replace(/-/g, '')),
                            )
                            .send({ from: account })
                                .on('error', () => {
                                    this.setProps({
                                        subscribing: false,
                                    })
                                })
                                .on('transactionHash', (hash) => {
                                    localStorage.setItem('subscribeTX', hash);
                                    this.setProps({
                                        subscribing: false,
                                        subscribeTX: hash,
                                    });
                                });
                    }
                },
                'click .sign-up-main__plan-option__approve-btn': async (evt) => {
                    this.setProps({ approving: true });
                    const {tokenAddress} = evt.target.dataset;
                    const { web3btn, contractAddress } = this.props;
                    const { web3, account } = web3btn.props;
                    const token = new web3.eth.Contract(minABI, tokenAddress);
                    await token.methods
                            .approve(contractAddress, BigNumber(999999999 * 10 ** 18).toFixed())
                            .send({ from: account })
                            .on('error', () => {
                                this.setProps({
                                    approveTX: null,
                                    approving: false,
                                })
                            })
                            .on('receipt', () => {
                                localStorage.setItem('approveTX', '');
                                this.setProps({
                                    approveTX: null,
                                })
                            })
                            .on('transactionHash', (hash) => {
                                localStorage.setItem('approveTX', hash);
                                this.setProps({
                                    approving: false,
                                    approveTX: hash,
                                });
                            });
                },
                'click .sign-up-main__plan-option__approve-pending-btn': (evt) => {
                    const {approveTx} = evt.target.dataset;
                    window.open(`https://rinkeby.etherscan.io/tx/${approveTx}`, '_blank');
                },
                'click .sign-up-main__plan-option__subscribe-pending-btn': (evt) => {
                    const {subscribeTx} = evt.target.dataset;
                    window.open(`https://rinkeby.etherscan.io/tx/${subscribeTx}`, '_blank');
                },
                'change .sign-up-main__email-form__input': (evt) => {
                    const value = evt.target.value;
                    this.email = value;
                },
                'click .sign-up-main__email-form__submit-btn': async (evt) => {
                    if (!this.email) {
                        return;
                    }

                    evt.target.innerHTML = `<img src="{{asset 'spinner.gif'}}" />`;

                    const {web3btn, web3PayUrl, uuid} = this.props;
                    const {web3, account} = web3btn.props;

                    const payload = {
                        email: this.email,
                    };
                    const msgParams = JSON.stringify({
                        domain: {
                            chainId: 4,
                            version: '1',
                        },
                        primaryType: 'Payload',
                        types: {
                            EIP712Domain: [
                                { name: 'chainId', type: 'uint' },
                                { name: 'version', type: 'string' },
                            ],
                            Payload: [
                                { name: 'email', type: 'string' },
                            ],
                        },
                        message: payload,
                    });
                    const opt = {
                        method: 'eth_signTypedData_v4',
                        params: [account, msgParams],
                        from: account,
                    };

                    await new Promise((resolve, reject) => {
                        web3.currentProvider.sendAsync(opt, async (err, response) => {
                            if (err) {
                                this.email = null;
                                this.setProps({ signupError: err.payload });
                                return;
                            }

                            try {
                                const resp = await fetch(`${web3PayUrl}/ghost/signup`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({
                                        ...payload,
                                        uuid,
                                        signature: response.result,
                                        account: account,
                                    }),
                                });

                                const json = await resp.json();

                                if (json.error) {
                                    throw new Error(json.payload);
                                }

                                resolve(json);
                                this.email = null;
                                this.setProps({
                                    checkedSubscriptions: null,
                                });
                            } catch (e) {
                                this.email = null;
                                this.setProps({ signupError: e.message });
                            }
                        });
                    });
                }
            };

            refs = {
                'plan-select-btn': this.renderButton.bind(this),
                'signup': async () => {
                    return `
                        ${await this.renderEmailForm()}
                        ${await this.renderPlans()}
                    `;
                }
            }

            async premount() {
                const { web3PayUrl, uuid } = this.props;
                const resp = await fetch(`${web3PayUrl}/plans/${uuid}`);
                const json = await resp.json();
                const approveTX = localStorage.getItem('approveTX');
                const subscribeTX = localStorage.getItem('subscribeTX');

                this.setProps({
                    plans: json.payload.map(plan => ({
                        ...plan,
                        amount: plan.value / (10 ** plan.tokenDecimals),
                        currency: plan.tokenSymbol,
                        title: plan.title,
                        description: plan.description,
                    })),
                    approveTX,
                    subscribeTX,
                })
            }

            async postupdate() {
                const { web3btn, web3PayUrl, checkedSubscriptions } = this.props;
                const { web3, account } = web3btn.props;
                const approveTX = localStorage.getItem('approveTX');
                const subscribeTX = localStorage.getItem('subscribeTX');
                const checksumAddress = account && web3.utils.toChecksumAddress(account);

                if (approveTX && web3 && !this.watchApproveTX) {
                    this.watchApproveTX = setInterval(async () => {
                        const receipt = await web3.eth.getTransactionReceipt(approveTX);
                        if (receipt) {
                            localStorage.setItem('approveTX', '');
                            this.setProps({
                                approving: false,
                                approveTX: null,
                            });
                            clearInterval(this.watchApproveTX);
                        }
                    }, 10000);
                }

                if (subscribeTX && web3 && !this.watchSubscribeTX) {
                    this.watchSubscribeTX = setInterval(async () => {
                        const resp = await fetch(`${web3PayUrl}/subscriptions?subscriber=${checksumAddress}`);
                        const json = await resp.json();
                        const subscriptions = json.payload;

                        if (subscriptions.length) {
                            localStorage.setItem('subscribeTX', '');
                            this.setProps({
                                subscribing: false,
                                subscribeTX: null,
                                subscriptions,
                            });
                            clearInterval(this.watchSubscribeTX);
                        }
                    }, 10000);
                }

                if (account && checkedSubscriptions !== account) {
                    const resp = await fetch(`${web3PayUrl}/subscriptions?subscriber=${checksumAddress}`);
                    const json = await resp.json();
                    const subscriptions = json.payload;
                    this.email = null;
                    this.setProps({
                        subscriptions,
                        checkedSubscriptions: account,
                        subscribing: false,
                    });
                }
            }

            async render() {
                return `
                    <div data-ref-signup>
                        ${await this.renderEmailForm()}
                        ${await this.renderPlans()}
                    </div>
                `;
            }

            async renderEmailForm() {
                const {subscriptions, uuid, web3btn, plans, signupError} = this.props;
                const {account} = web3btn.props;

                if (!subscriptions || !subscriptions.length) {
                    return '';
                }

                if (account) {
                    const [subscription] = subscriptions
                            .filter(({ id }) => id === `0x${uuid.replace(/-/g, '')}${account.slice(2).toLowerCase()}`);

                    if (subscription && subscription.ghostId) {
                        return `
                            <div class="sign-up-main__email-form__title">
                                You've already signed up!
                            </div>
                         `;
                    }

                    if (subscription) {
                        const plan = plans.filter(({ interval }) => interval === subscription.interval)[0];

                        return `
                            <div class="sign-up-main__email-form">
                                <div class="sign-up-main__email-form__title">
                                    You're subscribed to the ${plan.title} plan
                                </div>
                                <div class="sign-up-main__email-form__subtitle">
                                    Enter your email below to complete signup
                                </div>
                                <div class="sign-up-main__email-form__input-label">
                                    Email
                                </div>
                                <input
                                    class="sign-up-main__email-form__input"
                                    placeholder="joe@example.com"
                                    type="text"
                                />
                                ${signupError ? `
                                    <div class="sign-up-main__email-form__error">
                                        ${signupError}
                                    </div>
                                ` : ''}
                                <button
                                    class="sign-up-main__email-form__submit-btn"
                                >
                                    Sign up
                                </button>
                            </div>
                         `;
                    }
                }

                return '';
            }

            async renderPlans() {
                const {plans, subscriptions, uuid, web3btn} = this.props;
                const {account} = web3btn.props;

                if (subscriptions && account) {
                    const [subscription] = subscriptions
                            .filter(({ id }) => id === `0x${uuid.replace(/-/g, '')}${account.slice(2).toLowerCase()}`);
                    if (subscription) {
                        return '';
                    }
                }

                console.log(plans);
                const promises = plans.map(async plan => `
                    <div class="sign-up-main__plan-option">
                        <div class="sign-up-main__plan-option__price">
                            ${plan.amount} ${plan.currency}
                        </div>
                        <div class="sign-up-main__plan-option__type">
                            ${plan.title}
                        </div>
                        <div class="sign-up-main__plan-option__subtitle">
                            ${plan.description}
                        </div>
                        <div
                            data-ref-plan-select-btn
                            data-owner-address="${plan.ownerAddress}"
                            data-token-address="${plan.tokenAddress}"
                            data-token-symbol="${plan.tokenSymbol}"
                            data-token-decimals="${plan.tokenDecimals}"
                            data-value="${plan.value}"
                            data-interval="${plan.interval}"
                        >
                            ${await this.renderButton({
                                dataset: {
                                    ownerAddress: plan.ownerAddress,
                                    tokenAddress: plan.tokenAddress,
                                    tokenSymbol: plan.tokenSymbol,
                                    tokenDecimals: plan.tokenDecimals,
                                    value: plan.value,
                                    interval: plan.interval,
                                },
                            })}
                        </div>
                    </div>
                `);

                return Promise.all(promises).then(d => d.join(''));
            }

            async renderButton(el) {
                const {
                    web3btn,
                    contractAddress,
                    approving,
                    approveTX,
                    subscribing,
                    subscribeTX,
                } = this.props;
                const { web3, account } = web3btn.props;

                if (web3 && el) {
                    const {
                        ownerAddress,
                        tokenAddress,
                        value,
                        interval,
                    } = el.dataset;

                    if (approveTX) {
                        return `
                            <button
                                class="sign-up-main__plan-option__approve-pending-btn"
                                data-approve-tx="${approveTX}"
                            >
                                TX pending <img src="{{asset 'spinner.gif'}}" />
                            </button>
                        `;
                    }

                    if (approving) {
                        return `
                            <button
                                class="sign-up-main__plan-option__approve-btn"
                                data-token-address="${tokenAddress}"
                            >
                                <img src="{{asset 'spinner.gif'}}" />
                            </button>
                        `;
                    }

                    const token = new web3.eth.Contract(minABI, tokenAddress);
                    const allowance = await token.methods.allowance(account, contractAddress).call();

                    if (allowance < value) {
                        return `
                            <button
                                class="sign-up-main__plan-option__approve-btn"
                                data-token-address="${tokenAddress}"
                            >
                                Approve
                            </button>
                        `;
                    }

                    if (subscribeTX) {
                        return `
                            <button
                                class="sign-up-main__plan-option__subscribe-pending-btn"
                                data-subscribe-tx="${subscribeTX}"
                            >
                                TX pending <img src="{{asset 'spinner.gif'}}" />
                            </button>
                        `;
                    }

                    if (subscribing) {
                        return `
                            <button
                                class="sign-up-main__plan-option__select-pending-btn"
                            >
                                <img src="{{asset 'spinner.gif'}}" />
                            </button>
                        `;
                    }

                    return `
                        <button
                            class="sign-up-main__plan-option__select-btn"
                            data-owner-address="${ownerAddress}"
                            data-token-address="${tokenAddress}"
                            data-value="${value}"
                            data-interval="${interval}"
                        >
                            Subscribe
                        </button>
                    `;
                }

                return `
                    <button
                        class="sign-up-main__plan-option__select-btn"
                        disabled
                    >
                        Select
                    </button>
                `;
            }
        }

        const Web3Modal = window.Web3Modal.default;
        const WalletConnectProvider = window.WalletConnectProvider.default;
        const minABI = [
            {
                "constant":true,
                "inputs":[{"name":"_owner","type":"address"}],
                "name":"balanceOf",
                "outputs":[{"name":"balance","type":"uint256"}],
                "type":"function"
            },
            {
                "constant":true,
                "inputs":[],
                "name":"decimals",
                "outputs":[{"name":"","type":"uint8"}],
                "type":"function"
            },
            {
                "constant":true,
                "inputs":[],
                "name":"symbol",
                "outputs":[{"name":"","type":"string"}],
                "type":"function"
            },
            {
                "constant": false,
                "inputs": [{"name": "_spender", "type": "address"}, {"name": "_value", "type": "uint256"}],
                "name": "approve",
                "outputs": [{"name": "", "type": "bool"}],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [{"name": "_owner", "type": "address"}, {"name": "_spender", "type": "address"}],
                "name": "allowance",
                "outputs": [{"name": "", "type": "uint256"}],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
        ];

        class Web3Button extends Component {
            async premount() {
                const providerOptions = {
                    walletconnect: {
                        package: WalletConnectProvider,
                        options: {
                            infuraId: "c541e55ce2ca4898b17d4deae83289cc",
                        }
                    },
                };
                const web3Modal = new Web3Modal({
                    // network: "mainnet", // optional
                    cacheProvider: false, // optional
                    providerOptions // required
                });
                this.web3Modal = web3Modal;
            }

            refs = {
                'web3-btn': this.renderButton.bind(this),
            }

            events = {
                'click .web3-btn': async () => {
                    this.setProps({ isLoading: true });
                    await this.web3Modal.clearCachedProvider();
                    const provider = await this.web3Modal.connect();
                    const web3 = new Web3(provider);

                    this.setProps({ web3 });

                    web3.currentProvider.on('accountsChanged', ([account]) => {
                        this.updateAccountInfo(account);
                    });

                    const [account] = await web3.eth.getAccounts();
                    this.updateAccountInfo(account);
                },
                'click .web3-btn-wrapper__address': async () => {

                }
            }

            async updateAccountInfo(account) {
                const {web3} = this.props;

                if (web3) {
                    this.setProps({ isLoading: true });
                    const token = new web3.eth.Contract(minABI, this.props.tokenAddress);
                    const balance = await token.methods.balanceOf(account).call();
                    const symbol = await token.methods.symbol().call();
                    const decimals = await token.methods.decimals().call();
                    this.setProps({
                        web3,
                        account,
                        balance,
                        symbol,
                        decimals,
                        isLoading: false,
                    });
                }
            }

            async postupdate() {
                window.jdenticon();
            }

            render() {
                return `
                    <div class="web3-btn-wrapper" data-ref-web3-btn>
                        ${this.renderButton()}
                    </div>
                `;
            }

            renderButton() {
                const { web3, account, balance, symbol, decimals, isLoading } = this.props;

                if (!web3 || isLoading) {
                    return `
                        <button class="web3-btn">
                            ${isLoading ? '<img src="{{asset 'spinner.gif'}}" />': 'Connect to a wallet'}
                        </button>
                    `;
                }

                let adjustedBalance = balance / (10 ** decimals);
                adjustedBalance = Math.floor(adjustedBalance * 100)/100;


                return `
                    <div class="web3-btn-wrapper__balance">
                        ${adjustedBalance} ${symbol}
                    </div>
                    <button class="web3-btn-wrapper__address">
                        ${account.slice(0, 6)}...${account.slice(-6)}
                        <svg width="30.5" height="30.5" data-jdenticon-value="${account}"></svg>
                    </button>
                `;
            }
        }

        const contentRoot = document.querySelector('.sign-up-main__plan-options-root');
        const web3BtnRoot = document.querySelector('.web3-button-root');

        const web3btn = new Web3Button({
            tokenAddress: '0xc7ad46e0b8a400bb3c915120d284aafba8fc4735',
        });

        const signup = new Signup({
            uuid: '{{THEME_UUID}}',
            web3PayUrl: '{{THEME_WEB3_PAY_URL}}',
            plans: [],
            contractAddress: '{{THEME_CONTRACT_ADDRESS}}',
            web3btn,
        });

        signup.mount(contentRoot);
        signup.listen(web3btn);
        web3btn.mount(web3BtnRoot);
    })();
</script>